function exportSolution(executionContext) {
	//localStorage.setItem("deploymentRecordId", recordId);
	debugger;
	var Context = executionContext;
	 
	 var exportAsManaged = Context.getAttribute("devops_exportasmanaged").getValue();
	 //alert("export solution as managed  :" +exportAsManaged);
	 
	 var recordId = Context._entityReference.id.guid.toString();;
	 //alert(recordId);
	var notesSolutionFileNames = [];
	var devopsSolutionNames = [];
	var solutionsToBeExported = [];
	var notesQuery = "?$select=annotationid,filename,_objectid_value&$filter=isdocument eq true and  _objectid_value eq " + recordId;
	Xrm.WebApi.online.retrieveMultipleRecords("annotation", notesQuery).then(
    function success(results) {
        for (var i = 0; i < results.entities.length; i++) {
            var annotationid = results.entities[i]["annotationid"];
            var filename = results.entities[i]["filename"];
			notesSolutionFileNames.push(filename.split(".")[0]);
        }
		retrieveSolutionDeploymentOrder();
    },
    function(error) {
        Xrm.Utility.alertDialog(error.message);
    }
);

function retrieveSolutionDeploymentOrder() {
	console.log("Inside retrieveSolutionDeploymentOrder");
	var fetchXmlQuery = `<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="true">
  <entity name="devops_deployment">
    <attribute name="devops_deploymentid" />
    <attribute name="devops_name" />
    <attribute name="createdon" />
    <order attribute="devops_name" descending="false" />
    <filter type="and">
      <condition attribute="devops_deploymentid" operator="eq" value="${recordId}" />
    </filter>
    <link-entity name="devops_solutiondeploymentorder" from="devops_solutiondeploymentorder" to="devops_deploymentid" link-type="inner" alias="ac">
      <link-entity name="devops_solution" from="devops_solutionid" to="devops_solution" link-type="inner" alias="ad">
	  <attribute name="devops_solutionuniquename" />
	  </link-entity>
    </link-entity>
  </entity>
</fetch>`

	var solQuery = "?fetchXml=" +  encodeURIComponent(fetchXmlQuery);
	Xrm.WebApi.retrieveMultipleRecords("devops_deployment", solQuery).then(
		function success(results) {
			for (var i = 0; i < results.entities.length; i++) {
					var devops_solutionuniquename = results.entities[i]["ad.devops_solutionuniquename"];
					devopsSolutionNames.push(devops_solutionuniquename);
				}
				getSolutionsToBeExported();
				executeExportSolutionAction();
				
		},
		function (error) {
			Xrm.Utility.alertDialog(error.message, null);
		});		
		
}

function getSolutionsToBeExported() {
	if(notesSolutionFileNames < 1) {
		solutionsToBeExported = devopsSolutionNames
	} else {
		var solutions = devopsSolutionNames.filter(x => !notesSolutionFileNames.includes(x));
		solutionsToBeExported = solutions;
	}
}

function executeExportSolutionAction() {
	console.log("Executing Action");
for (var index = 0; index < solutionsToBeExported.length; index++){
	console.log("Executing Action for ", solutionsToBeExported[index]);
	var devops_ExecuteSolutionExportRequestRequest = {
    SolutionName: solutionsToBeExported[index],
    RecordId: recordId,
	ExportAsManaged: exportAsManaged,

    getMetadata: function() {
        return {
            boundParameter: null,
            parameterTypes: {
                "SolutionName": {
                    "typeName": "Edm.String",
                    "structuralProperty": 1
                },
                "RecordId": {
                    "typeName": "Edm.String",
                    "structuralProperty": 1
                },
                "ExportAsManaged": {
                    "typeName": "Edm.Boolean",
                    "structuralProperty": 1
                }
            },
            operationType: 0,
            operationName: "devops_ExecuteSolutionExportRequest"
        };
    }
};

	Xrm.WebApi.online.execute(devops_ExecuteSolutionExportRequestRequest).then(
    function success(result) {
        if (result.ok) {
				console.log("Action executed successfully");
				 
			}
    },
    function(error) {
        Xrm.Utility.alertDialog(error.message);
    }
);
	   }
	   var alertStrings = { confirmButtonLabel: "OK", text: "Your request has been queued. Please refresh the notes section to view the exported solutions", title: "Solution Export" };
		var alertOptions = { height: 120, width: 260 };
		Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
			function success(result) {
				console.log("Alert dialog closed");
			},
			function (error) {
				console.log(error.message);
			}
		);
	}
}	